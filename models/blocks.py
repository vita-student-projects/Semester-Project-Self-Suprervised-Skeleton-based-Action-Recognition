import torch
import torch.nn as nn
import torch.nn.functional as F
import math
import warnings
import random
import numpy as np
from collections import OrderedDict
from models.drop import DropPath
# from drop import DropPath

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)



class MLP(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, 
                    attn_drop=0., proj_drop=0., mode='spatial'):
        super().__init__()
        self.num_heads = num_heads
        qk_dim = dim // num_heads

        self.scale = qk_scale or qk_dim ** -0.5

        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)

        self.mode = mode

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)   # (BF, N, C) -> (BF, N, 3C)
        self.ts_attn = nn.Linear(dim*2, dim*2)
        self.proj_drop = nn.Dropout(proj_drop)


    def forward(self, x, seqlen=1):
        BF, N, C = x.shape
        
        if self.mode == 'spatial':
            # (BF, N, C) -> (BF, N, 3C) -> (BF, N, 3, #heads, C//#heads) -> (3, BF, #heads, N, C//#heads)
            qkv = self.qkv(x).reshape(BF, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
            q, k, v = qkv[0], qkv[1], qkv[2]    # (BF, #heads, N, C//#heads)
            x = self.forward_spatial(q, k, v)
        elif self.mode == 'temporal':
            # (BF, N, C) -> (BF, N, 3C) -> (BF, N, 3, #heads, C//#heads) -> (3, BF, #heads, N, C//#heads)
            qkv = self.qkv(x).reshape(BF, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
            q, k, v = qkv[0], qkv[1], qkv[2]    # (BF, #heads, N, C//#heads)
            x = self.forward_temporal(q, k, v, seqlen)
        elif self.mode == 'parallel':
            # (BF, N, C) -> (BF, N, 3C) -> (BF, N, 3, #heads, C//#heads) -> (3, BF, #heads, N, C//#heads)
            qkv = self.qkv(x).reshape(BF, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
            q, k, v = qkv[0], qkv[1], qkv[2]
            x_t = self.forward_temporal(q, k, v, seqlen=seqlen) # BF, J, Chead*#heads
            x_s = self.forward_spatial(q, k, v)                 # BF, J, Chead*#heads
            
            alpha = torch.cat([x_s, x_t], dim=-1)       # BF, J, Chead*#heads*2
            alpha = alpha.mean(dim=1, keepdim=True)     # BF, 1, Chead*#heads*2
            alpha = self.ts_attn(alpha).reshape(BF, 1, C, 2)     # BF, 1, Chead*#heads, 2
            alpha = alpha.softmax(dim=-1)
            x = x_t * alpha[:,:,:,1] + x_s * alpha[:,:,:,0]
        elif self.mode == 'coupling':
            qkv = self.qkv(x).reshape(BF, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
            q, k, v = qkv[0], qkv[1], qkv[2]
            x = self.forward_coupling(q, k, v, seqlen=seqlen)
        else:
            raise NotImplementedError(self.mode)

        x = self.proj(x)
        x = self.proj_drop(x)

        return x


    def forward_spatial(self, q, k, v):
        BF, _, N, Chead = q.shape        # (BF, #heads, J, C//#heads)
        # (BF, #heads, J, C//#heads) @ (BF, #heads, C//#heads, J) -> BF, #heads, J, J
        attn = (q @ k.transpose(-2, -1)) * self.scale   
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)
        # (BF, #heads, J, J) @ (BF, #heads, J, C//#heads) -> BF, #heads, J, C//#head
        x = attn @ v
        # (BF, #heads, J, C//#head) -> (BF, J, #heads, C//#head) -> (BF, J, C)
        x = x.transpose(1,2).reshape(BF, N, Chead*self.num_heads)    # BF, J, Chead*#heads
        return x

    def forward_temporal(self, q, k, v, seqlen=8):
        BF, _, N, Chead = q.shape    # (BF, #heads, J, C//#heads)
        # (BF, #heads, J, C//#heads) -> (B, F, #heads, J, C//#heads) -> (B, #heads, J, F, C//#heads)
        qt = q.reshape(-1, seqlen, self.num_heads, N, Chead).permute(0, 2, 3, 1, 4) #(B, #heads, J, F, C//#heads)
        kt = k.reshape(-1, seqlen, self.num_heads, N, Chead).permute(0, 2, 3, 1, 4) #(B, #heads, J, F, C//#heads)
        vt = v.reshape(-1, seqlen, self.num_heads, N, Chead).permute(0, 2, 3, 1, 4) #(B, #heads, J, F, C//#heads)

        # (B, #heads, J, F, C//#heads) @ (B, #heads, J, C//#heads, F)
        attn = (qt @ kt.transpose(-2, -1)) * self.scale # B, #heads, J, F, F
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = attn @ vt   # B, #heads, J, F, C//#heads
        # B, F, J, #heads, C//#head -> 
        x = x.permute(0, 3, 2, 1, 4).reshape(BF, N, Chead*self.num_heads)    # BF, J, Chead*#heads
        return x

    def reshape_T(self, x, seqlen=1, inverse=False):
        if not inverse:
            N, C = x.shape[-2:]     
            # BT, #heads, J, c//#heads -> B, T, #heads, J, c//#heads -> B, #heads, T, J, c//#heads
            x = x.reshape(-1, seqlen, self.num_heads, N, C).transpose(1,2)
            x = x.reshape(-1, self.num_heads, seqlen*N, C) #(B, H, TN, c)
        else:
            TN, C = x.shape[-2:]
            x = x.reshape(-1, self.num_heads, seqlen, TN // seqlen, C).transpose(1,2)
            x = x.reshape(-1, self.num_heads, TN // seqlen, C) #(BT, H, N, C)
        return x 

    def forward_coupling(self, q, k, v, seqlen=8):
        BT, _, N, C = q.shape       # BT, #heads, J, C//#heads
        q = self.reshape_T(q, seqlen)       # (B, #heads, TJ, C//#heads)
        k = self.reshape_T(k, seqlen)
        v = self.reshape_T(v, seqlen)

        attn = (q @ k.transpose(-2, -1)) * self.scale   # (B, #heads, TJ, TJ)
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = attn @ v        # (B, #heads, TJ, C//#heads)
        x = self.reshape_T(x, seqlen, inverse=True)     #(BT, #heads, J, C//#heads)
        x = x.transpose(1,2).reshape(BT, N, C*self.num_heads)
        return x


class Block(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., mlp_out_ratio=1., qkv_bias=True, qk_scale=None, 
                    drop=0., attn_drop=0., drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm, 
                    mode='parallel'):
        super().__init__()

        self.mode = mode
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop,
            mode=self.mode)

        
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        mlp_out_dim = int(dim * mlp_out_ratio)
        self.mlp = MLP(in_features=dim, hidden_features=mlp_hidden_dim, out_features=mlp_out_dim, 
                            act_layer=act_layer, drop=drop)


    def forward(self, x, seqlen=1):
        x = x + self.drop_path(self.attn(self.norm1(x), seqlen))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class SkeleEmbed(nn.Module):
    """Image to Patch Embedding"""

    def __init__(
        self,
        dim_in=3,
        dim_feat=256,
        num_frames=100,
        num_joints=25,
        patch_size=1,
        t_patch_size=4,
    ):
        super().__init__()
        assert num_frames % t_patch_size == 0
        num_patches = (
            (num_joints // patch_size) * (num_frames // t_patch_size)
        )

        self.num_joints = num_joints
        self.patch_size = patch_size

        self.num_frames = num_frames
        self.t_patch_size = t_patch_size

        self.num_patches = num_patches

        kernel_size = [t_patch_size, patch_size]
        self.proj = nn.Conv2d(dim_in, dim_feat, kernel_size=kernel_size, stride=kernel_size)

    def forward(self, x):
        _, T, V, _ = x.shape
        x = torch.einsum("ntsc->ncts", x)  # [N, C, T, V]
        
        x = self.proj(x)
        x = torch.einsum("ncts->ntsc", x)  # [N, T, V, C]
        return x


class Former(nn.Module):
    def __init__(self, dim_in=3, dim_feat=256, 
                 depth=5, num_heads=8, mlp_ratio=4, 
                 num_frames=100, num_joints=25, patch_size=1, t_patch_size=4,
                 qkv_bias=True, qk_scale=None, drop_rate=0., attn_drop_rate=0., 
                 drop_path_rate=0., norm_layer=nn.LayerNorm, norm_skes_loss=False,
                 mode='parallel'):
        super().__init__()

        self.mode = mode
        self.dim_feat = dim_feat

        self.num_joints = num_joints
        self.num_frames = num_frames
        self.patch_size = patch_size
        self.t_patch_size = t_patch_size

        self.norm_skes_loss = norm_skes_loss

        self.joints_embed = SkeleEmbed(dim_in, dim_feat, num_frames, num_joints, patch_size, t_patch_size)
        self.pos_drop = nn.Dropout(p=drop_rate)
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=dim_feat, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer,
                mode=self.mode
                )
            for i in range(depth)])

        self.temp_embed = nn.Parameter(torch.zeros(1, num_frames//t_patch_size, 1, dim_feat))
        self.pos_embed = nn.Parameter(torch.zeros(1, 1, num_joints//patch_size, dim_feat))
        trunc_normal_(self.temp_embed, std=.02)
        trunc_normal_(self.pos_embed, std=.02)

        self.norm = norm_layer(dim_feat)

        self.apply(self._init_weights)      


    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            # we use xavier_uniform following official JAX ViT:
            torch.nn.init.xavier_uniform_(m.weight)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)  
    
    def patchify(self, imgs):
        """
        imgs: (N, T, V, 3)
        x: (N, L, t_patch_size * patch_size * 3)
        """
        NM, T, V, C = imgs.shape
        p = self.patch_size
        u = self.t_patch_size
        assert V % p == 0 and T % u == 0
        VP = V // p
        TP = T // u

        x = imgs.reshape(shape=(NM, TP, u, VP, p, C))
        x = torch.einsum("ntuvpc->ntvupc", x)
        x = x.reshape(shape=(NM, TP * VP, u * p * C))
        return x

    def extract_motion(self, x, motion_stride=1):
        """
        imgs: [NM, T, V, 3]
        """
        # generate motion
        x_motion = torch.zeros_like(x)
        x_motion[:, :-motion_stride, :, :] = x[:, motion_stride:, :, :] - x[:, :-motion_stride, :, :]
        x_motion[:, -motion_stride:, :, :] = 0
        return x_motion

    def motion_aware_random_masking(self, x, x_orig, mask_ratio, tau):
        """
        Perform per-sample random masking by per-sample shuffling.
        Per-sample shuffling is done by argsort random noise.
        x: [NM, L, D], sequence
        x_orig: patchified original skeleton sequence
        """
        
        NM, T, J, D = x.shape  # batch, length, dim
        _, TP, JP, _ = x_orig.shape
        len_keep = math.ceil(T * (1 - mask_ratio))

        x_orig_motion = torch.zeros_like(x_orig)
        x_orig_motion[:, 1:, :, :] = torch.abs(x_orig[:, 1:, :, :] - x_orig[:, :-1, :, :])
        x_orig_motion[:, 0, :, :] = x_orig_motion[:, 1, :, :]
        x_orig_motion = x_orig_motion.mean(dim=[3])  # NM, TP, JP

        x_orig_motion = x_orig_motion / (torch.max(x_orig_motion, dim=1, keepdim=True).values * tau + 1e-10)
        x_orig_motion_prob = F.softmax(x_orig_motion, dim=1)

        noise = torch.log(x_orig_motion_prob) - torch.log(-torch.log(torch.rand(NM, T, J, device=x.device) + 1e-10) + 1e-10)  # gumble

        # sort noise for each sample
        ids_shuffle = torch.argsort(
            noise, dim=1
        )  # ascend: small is keep, large is remove
        ids_restore = torch.argsort(ids_shuffle, dim=1)

        # keep the first subset
        ids_keep = ids_shuffle[:, :len_keep, :]
        x_masked = torch.gather(x, dim=1, index=ids_keep.unsqueeze(-1).repeat(1, 1, 1, D))
        # generate the binary mask: 0 is keep, 1 is remove
        mask = torch.ones([NM, T, J], device=x.device)
        mask[:, :len_keep, :] = 0
        # unshuffle to get the binary mask
        mask = torch.gather(mask, dim=1, index=ids_restore)

        return x_masked, mask, ids_restore, ids_keep, len_keep
        

    def random_masking(self, x, mask_ratio):
        """
        Perform per-sample random masking by per-sample shuffling.
        Per-sample shuffling is done by argsort random noise.
        x: [N, L, D], sequence
        """
        N, L, D = x.shape  # batch, length, dim
        # len_keep = int(L * (1 - mask_ratio))
        len_keep = math.ceil(L * (1 - mask_ratio))

        noise = torch.rand(N, L, device=x.device)  # noise in [0, 1]

        # sort noise for each sample
        ids_shuffle = torch.argsort(
            noise, dim=1
        )  # ascend: small is keep, large is remove
        ids_restore = torch.argsort(ids_shuffle, dim=1)

        # keep the first subset
        ids_keep = ids_shuffle[:, :len_keep]
        x_masked = torch.gather(x, dim=1, index=ids_keep.unsqueeze(-1).repeat(1, 1, D))

        # generate the binary mask: 0 is keep, 1 is remove
        mask = torch.ones([N, L], device=x.device)
        mask[:, :len_keep] = 0
        # unshuffle to get the binary mask
        mask = torch.gather(mask, dim=1, index=ids_restore)

        return x_masked, mask, ids_restore, ids_keep, len_keep

    def forward_encoder(self, x, mask_ratio, motion_aware_tau, setting='student'):
        x_orig = self.patchify(x)
        # embed skeletons
        x = self.joints_embed(x)
        NM, TP, VP, C = x.shape
        # add pos & temp embed
        x = x + self.pos_embed[:, :, :VP, :] + self.temp_embed[:, :TP, :, :]
        # masking: length -> length * mask_ratio
        if setting == 'student':
            if motion_aware_tau > 0:
                x_orig = x_orig.reshape(shape=(NM, TP, VP, -1))
                x, mask, ids_restore, _, len_keep = self.motion_aware_random_masking(x, x_orig, mask_ratio, motion_aware_tau)
            else:   
                x, mask, ids_restore, _, len_keep = self.random_masking(x, mask_ratio)
            # apply Transformer blocks
            x = x.reshape(NM*len_keep, VP, C)
        elif setting == 'teacher' or 'test':
            len_keep = TP
            x = x.reshape(NM*len_keep, VP, C)
            ids_restore = 0
            mask = 0

        for idx, blk in enumerate(self.blocks):
            x = blk(x, len_keep)

        x = self.norm(x)
        x = x.reshape(NM, len_keep, VP, C)

        return x, mask, ids_restore

        
    def forward(self, x, mask_ratio=0.90, motion_stride=1, motion_aware_tau=0.75, setting='student', **kwargs):   
        N, C, T, V, M = x.shape
        x = x.permute(0, 4, 2, 3, 1).contiguous().view(N * M, T, V, C)
        x_motion = self.extract_motion(x, motion_stride)
        latent, mask, ids_restore = self.forward_encoder(x, mask_ratio, motion_aware_tau, setting)
        return latent, mask, ids_restore, x_motion


class Predictor(nn.Module):
    def __init__(self, dim_in=256, dim_feat=256, 
                 depth=3, num_heads=8, mlp_ratio=4, 
                 num_frames=100, num_joints=25, patch_size=1, t_patch_size=4,
                 qkv_bias=True, qk_scale=None, drop_rate=0., attn_drop_rate=0., 
                 drop_path_rate=0., norm_layer=nn.LayerNorm, norm_skes_loss=False):
        super().__init__()

        self.dim_feat = dim_feat
        self.predictor_embed = nn.Linear(dim_feat, dim_feat, bias=True)
        self.predictor_blocks = nn.ModuleList([
            Block(
                dim=dim_feat, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, norm_layer=norm_layer,
                mode='spatial'
                )
            for i in range(depth)])
        self.predictor_norm = norm_layer(dim_feat)

        self.predictor_temp_embed = nn.Parameter(torch.zeros(1, num_frames//t_patch_size, 1, dim_feat))
        self.predictor_pos_embed = nn.Parameter(torch.zeros(1, 1, num_joints//patch_size, dim_feat))
        trunc_normal_(self.predictor_pos_embed, std=.02)
        trunc_normal_(self.predictor_temp_embed, std=.02)

        self.predictor_pred = nn.Linear(
            dim_feat,
            dim_feat,
            bias=True
        )

        self.apply(self._init_weights)
    

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            torch.nn.init.xavier_uniform_(m.weight)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)


    def forward(self, x):   
        B, F, J, C = x.shape
        x = self.predictor_embed(x)
        x = x + self.predictor_pos_embed[:, :, :J, :]      # B, F, J, dim_feat
        x = x + self.predictor_temp_embed[:, :F, :, :]      # B, F, J, dim_feat
        
        x = x.reshape(-1, F*J, C)     # B, F * J, C
        B = x.shape[0]

        for idx, blk in enumerate(self.predictor_blocks):
            x_s = blk(x, F)
            x = x_s

        x = self.predictor_norm(x)
        x = self.predictor_pred(x)
        x = x.reshape(B, F, J, -1)

        return x


class Decoder(nn.Module):
    def __init__(self, dim_in=3, dim_feat=256, 
                 depth=3, num_heads=8, mlp_ratio=4, 
                 num_frames=100, num_joints=25, patch_size=1, t_patch_size=4,
                 qkv_bias=True, qk_scale=None, drop_rate=0., attn_drop_rate=0., 
                 drop_path_rate=0., norm_layer=nn.LayerNorm, norm_skes_loss=False):
        super().__init__()

        self.dim_feat = dim_feat
        self.decoder_embed = nn.Linear(dim_feat, dim_feat, bias=True)
        self.decoder_blocks = nn.ModuleList([
            Block(
                dim=dim_feat, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, norm_layer=norm_layer,
                mode='spatial'
                )
            for i in range(depth)])
        self.decoder_norm = norm_layer(dim_feat)

        self.decoder_temp_embed = nn.Parameter(torch.zeros(1, num_frames//t_patch_size, 1, dim_feat))
        self.decoder_pos_embed = nn.Parameter(torch.zeros(1, 1, num_joints//patch_size, dim_feat))
        trunc_normal_(self.decoder_temp_embed, std=.02)
        trunc_normal_(self.decoder_pos_embed, std=.02)
        
        self.decoder_pred = nn.Linear(
            dim_feat,
            t_patch_size * patch_size * dim_in,
            bias=True
        )

        self.apply(self._init_weights)
    

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            torch.nn.init.xavier_uniform_(m.weight)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)


    def forward(self, x):   
        B, F, J, C = x.shape
        x = self.decoder_embed(x)
        x = x + self.decoder_pos_embed[:, :, :J, :]      # B, F, J, dim_feat
        x = x + self.decoder_temp_embed[:, :F, :, :]      # B, F, J, dim_feat
        
        x = x.reshape(-1, F*J, C)     # B, F * J, C
        B = x.shape[0]

        for idx, blk in enumerate(self.decoder_blocks):
            x = blk(x, F)

        x = self.decoder_norm(x)
        
        # predictor projection
        x = self.decoder_pred(x)

        return x


class ActionHeadLinprobe(nn.Module):
    def __init__(self, dim_feat=256, num_classes=60, num_joints=25):
        super(ActionHeadLinprobe, self).__init__()
        self.fc = nn.Linear(dim_feat, num_classes)
        
    def forward(self, feat):
        '''
            Input: (N, M, T, J, C)
        '''
        N, M, T, J, C = feat.shape
        feat = feat.mean(dim=[1,2,3])
        feat = self.fc(feat)
        return feat

class ActionHeadFinetune(nn.Module):
    def __init__(self, dropout_ratio=0., dim_feat=256, num_classes=60, num_joints=25, hidden_dim=2048):
        super(ActionHeadFinetune, self).__init__()
        self.dropout = nn.Dropout(p=dropout_ratio)
        self.bn = nn.BatchNorm1d(hidden_dim, momentum=0.1)
        self.relu = nn.ReLU(inplace=True)
        self.fc1 = nn.Linear(dim_feat*num_joints, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, num_classes)
        
    def forward(self, feat):
        '''
            Input: (N, M, T, J, C)
        '''
        N, M, T, J, C = feat.shape
        feat = self.dropout(feat)
        feat = feat.permute(0, 1, 3, 4, 2)      # (N, M, T, J, C) -> (N, M, J, C, T)
        feat = feat.mean(dim=-1)
        feat = feat.reshape(N, M, -1)           # (N, M, J*C)
        feat = feat.mean(dim=1)
        feat = self.fc1(feat)
        feat = self.bn(feat)
        feat = self.relu(feat)    
        feat = self.fc2(feat)
        return feat
        

if __name__ == "__main__":
    from torchinfo import summary
    # B = 4
    # T = 100
    # J = 25
    # C = 256
    # x = torch.rand(B*T, J, C)
    # print(x.shape)
    # attentionLayer = Attention(dim=C, num_heads=8, mode='spatial')
    # output = attentionLayer(x, T)
    # print(output.shape)

    # B = 4
    # T = 100
    # J = 25
    # C = 256
    # x = torch.rand(B*T, J, C)
    # print(x.shape)
    # attentionLayer = Attention(dim=C, num_heads=8, mode='temporal')
    # output = attentionLayer(x, T)
    # print(output.shape)

    # B = 4
    # T = 100
    # J = 25
    # C = 256
    # x = torch.rand(B*T, J, C)
    # print(x.shape)
    # attentionLayer = Attention(dim=C, num_heads=8, mode='parallel')
    # output = attentionLayer(x, T)
    # print(output.shape)
    # summary(attentionLayer, [(B*T, J, C)])

    # B = 4
    # T = 100
    # J = 25
    # C = 256
    # x = torch.rand(B*T, J, C)
    # print(x.shape)
    # blockLayer = Block(dim=C, num_heads=8, mode='spatial')
    # output = blockLayer(x, T)
    # print(output.shape)

    # B = 4
    # T = 100
    # J = 25
    # C = 256
    # x = torch.rand(B*T, J, C)
    # print(x.shape)
    # blockLayer = Block(dim=C, num_heads=8, mode='temporal')
    # output = blockLayer(x, T)
    # print(output.shape)

    # B = 4
    # T = 100
    # J = 25
    # C = 256
    # x = torch.rand(B*T, J, C)
    # print(x.shape)
    # blockLayer = Block(dim=C, num_heads=8, mode='parallel')
    # output = blockLayer(x, T)
    # print(output.shape)
    # summary(blockLayer, [(B*T, J, C)])

    # B = 4
    # T = 100
    # J = 25
    # C = 3
    # M = 2
    # x = torch.rand(B, C, T, J, M)
    # print(x.shape)
    # formLayer = Former(dim_in=3, dim_feat=256, mode='spatial')
    # output, _, _, _ = formLayer(x)
    # print(output.shape)

    # B = 4
    # T = 100
    # J = 25
    # C = 3
    # M = 2
    # x = torch.rand(B, C, T, J, M)
    # print(x.shape)
    # formLayer = Former(dim_in=3, dim_feat=256, mode='temporal')
    # output, _, _, _ = formLayer(x)
    # print(output.shape)

    B = 4
    T = 60
    J = 25
    C = 3
    M = 2
    x = torch.rand(B, C, T, J, M)
    print(x.shape)
    formLayer = Former(dim_in=3, dim_feat=256, mode='parallel')
    output, _, _, _ = formLayer(x, setting='student')
    print(output.shape)
    summary(formLayer, [(B, C, T, J, M)])

    B = 4
    T = 60
    J = 25
    C = 3
    M = 2
    x = torch.rand(B, C, T, J, M)
    print(x.shape)
    formLayer = Former(dim_in=3, dim_feat=256, mode='parallel')
    output, _, _, _ = formLayer(x, setting='teacher')
    print(output.shape)
    summary(formLayer, [(B, C, T, J, M)])

    B = 4
    T = 60
    J = 25
    C = 3
    M = 2
    x = torch.rand(B, C, T, J, M)
    print(x.shape)
    formLayer = Former(dim_in=3, dim_feat=256, mode='coupling')
    output, _, _, _ = formLayer(x, setting='student')
    print(output.shape)
    summary(formLayer, [(B, C, T, J, M)])

    B = 4
    T = 60
    J = 25
    C = 3
    M = 2
    x = torch.rand(B, C, T, J, M)
    print(x.shape)
    formLayer = Former(dim_in=3, dim_feat=256, mode='coupling')
    output, _, _, _ = formLayer(x, setting='teacher')
    print(output.shape)
    summary(formLayer, [(B, C, T, J, M)])

    # B = 4
    # T = 25
    # J = 25
    # C = 256
    # M = 2
    # x = torch.rand(B*M, T, J, C)
    # print(x.shape)
    # decoder = Decoder(dim_in=3, dim_feat=256)
    # output = decoder(x)
    # print(output.shape)

    # B = 4
    # T = 25
    # J = 25
    # C = 256
    # M = 2
    # x = torch.rand(B*M, T, J, C)
    # print(x.shape)
    # predictor = Predictor(dim_in=256, dim_feat=256)
    # output = predictor(x)
    # print(output.shape)